dim_config:
  owner:
    email: lvargas@mozilla.com  # TODO: add bochocki, but first owners needs to become a list object.
    slack: lvargas
  slack_alerts:
    enabled: true
    notification_level: INFO
    # TODO: maybe this could be made more granual
    # and we could have different settings per channel?
    notify_channel: true
    notify:
      channels:
        - kpi-monitoring-dim
  tier: tier_1
  partition_field: submission_date
  dim_tests:
    - type: custom_compare_metrics
      title: DAU validation - Firefox Desktop
      description: Validating that DAU sum in Active Users Aggregates is the same as unique client_id count in the live table.
      params:
        condition: dau_sum = distinct_client_count
        # TODO: metric should be a list rather than a map
        # to enable us an arbitary number of metrics in the comparison
        metric_1:
          name: dau_sum
          query: |
            SELECT SUM(dau),
            FROM `{{ project_id }}.{{ dataset }}.{{ table }}`
            WHERE submission_date = "{{ params.partition }}"
        metric_2:
          name: distinct_client_count
          query: |
            WITH base AS (
              SELECT client_id
              FROM `moz-fx-data-shared-prod.telemetry_live.main_v5`
              WHERE
                DATE(submission_timestamp) = "{{ params.partition }}"
                AND normalized_app_name = 'Firefox'
                AND document_id IS NOT NULL
            ),
            overactive AS (
              SELECT client_id
              FROM base
              GROUP BY client_id
              HAVING COUNT(*) > 150000
            )
            SELECT COUNT(DISTINCT client_id),
            FROM base
            FULL OUTER JOIN overactive USING(client_id)
            WHERE overactive.client_id IS NULL
    - type: custom_compare_metrics
      title: QDAU validation - Firefox Desktop
      description: Validating that QDAU sum in Active Users Aggregates is as expected based on the live table.
      params:
        condition: qdau_sum = live_table_qdau_count
        metric_1:
          name: qdau_sum
          query: |
            SELECT SUM(qdau),
            FROM `{{ project_id }}.{{ dataset }}.{{ table }}`
            WHERE submission_date = "{{ params.partition }}"
        metric_2:
          name: live_table_qdau_count
          query: |
            WITH base AS (
              SELECT
                client_id,
                SUM(payload.processes.parent.scalars.browser_engagement_total_uri_count_normal_and_private_mode) AS scalar_parent_browser_engagement_total_uri_count_normal_and_private_mode_sum,
                SUM(payload.processes.parent.scalars.browser_engagement_total_uri_count) AS scalar_parent_browser_engagement_total_uri_count_sum,
                SUM(COALESCE(
                    payload.processes.parent.scalars.browser_engagement_active_ticks,
                    payload.simple_measurements.active_ticks
                  )) AS active_ticks
              FROM
                  `moz-fx-data-shared-prod.telemetry_live.main_v5`
              WHERE
                DATE(submission_timestamp) = "{{ params.partition }}"
                AND normalized_app_name = 'Firefox'
                AND document_id IS NOT NULL
              GROUP BY
                client_id
            ),
            overactive AS (
              SELECT
                client_id
              FROM
                base
              GROUP BY
                client_id
              HAVING
                COUNT(*) > 150000
            ),
            client_summary AS (
              SELECT
                client_id,
                SUM(COALESCE(
                  scalar_parent_browser_engagement_total_uri_count_normal_and_private_mode_sum,
                  scalar_parent_browser_engagement_total_uri_count_sum
                )) AS total_uri_count,
                SUM(active_ticks / (3600 / 5)) AS active_hours_sum,
              FROM
                base
              LEFT JOIN
                overactive
              USING
                (client_id)
              WHERE
                overactive.client_id IS NULL
              GROUP BY
                client_id
            ),
            last_seen AS (
              SELECT
                client_id,
                days_since_seen,
              FROM `moz-fx-data-shared-prod.telemetry.clients_last_seen`
              WHERE
                submission_date = "{{ params.partition }}"
            )
            SELECT
              COUNTIF(
                active_hours_sum > 0 AND total_uri_count > 0 AND days_since_seen = 0
              )
            FROM
              client_summary
            LEFT JOIN last_seen
              USING(client_id)
